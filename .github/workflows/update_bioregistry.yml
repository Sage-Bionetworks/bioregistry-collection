name: Validate Bioregistry Rules

on:
  pull_request:
    branches:
      - main
  # Add workflow_dispatch to allow triggering from other workflows
  workflow_dispatch:

jobs:
  validate-rules:
    runs-on: ubuntu-latest
    steps:
      # Check if this is triggered by workflow_dispatch on a bot branch
      - name: Check trigger type
        id: check_trigger
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.ref }}" == "refs/heads/auto/maintain-collection" ]]; then
            echo "is_auto_triggered=true" >> $GITHUB_OUTPUT
            echo "This workflow was triggered by workflow_dispatch for an automated PR, auto-passing validation."
          else
            echo "is_auto_triggered=false" >> $GITHUB_OUTPUT
          fi

      # Auto-pass for workflow_dispatch on bot branch
      - name: Auto-pass for automated PR
        if: steps.check_trigger.outputs.is_auto_triggered == 'true'
        run: |
          echo "Skipping validation for automated PR."
          # This step ensures the job runs successfully for bot-triggered workflow_dispatch

      # Check if this is a PR from GitHub Actions bot
      - name: Check if PR is from GitHub Actions bot
        id: check_bot
        if: steps.check_trigger.outputs.is_auto_triggered != 'true'
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.user.login }}" == "github-actions[bot]" ]]; then
            echo "is_bot=true" >> $GITHUB_OUTPUT
            echo "This PR was created by the GitHub Actions bot, automatically passing validation."
          else
            echo "is_bot=false" >> $GITHUB_OUTPUT
          fi

      # Auto-pass for bot PRs
      - name: Auto-pass for GitHub Actions bot PR
        if: steps.check_trigger.outputs.is_auto_triggered != 'true' && steps.check_bot.outputs.is_bot == 'true'
        run: |
          echo "Skipping validation for GitHub Actions bot PR."

      # Only run validation for human PRs
      - uses: actions/checkout@v4
        if: steps.check_trigger.outputs.is_auto_triggered != 'true' && steps.check_bot.outputs.is_bot != 'true'

      - name: Set up Python
        if: steps.check_trigger.outputs.is_auto_triggered != 'true' && steps.check_bot.outputs.is_bot != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        if: steps.check_trigger.outputs.is_auto_triggered != 'true' && steps.check_bot.outputs.is_bot != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Generate bioregistry rules
        if: steps.check_trigger.outputs.is_auto_triggered != 'true' && steps.check_bot.outputs.is_bot != 'true'
        id: generate
        run: |
          python generate_bioregistry_rules.py 2>&1 | tee validation.log
          exit ${PIPESTATUS[0]}

      - name: Check for issues
        if: failure() && steps.check_trigger.outputs.is_auto_triggered != 'true' && steps.check_bot.outputs.is_bot != 'true'
        run: |
          if [ -f missing_patterns.txt ]; then
            echo "Missing patterns found for the following resources:"
            cat missing_patterns.txt
            echo "::error::Some resources are missing regex patterns. Check the logs for details."
          fi
          if [ -f duplicates.txt ]; then
            echo "Duplicate resources found:"
            cat duplicates.txt
            echo "::error::Duplicate resources found in collection.yaml. Check the logs for details."
          fi
          if [ -f invalid_prefixes.txt ]; then
            echo "Invalid prefixes found:"
            cat invalid_prefixes.txt
            echo "::error::Some prefixes are not registered in bioregistry.io. Check the logs for details."
          fi

      - name: Create Pull Request Comment
        if: always() && steps.check_trigger.outputs.is_auto_triggered != 'true' && steps.check_bot.outputs.is_bot != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let message = '## Bioregistry Collection Issues\n\n';
            let hasIssues = false;
            
            if (fs.existsSync('missing_patterns.txt')) {
              const missingPatterns = fs.readFileSync('missing_patterns.txt', 'utf8');
              message += '### Missing Regex Patterns\n\n';
              message += 'The following resources are missing regex patterns:\n\n';
              message += '```\n';
              message += missingPatterns;
              message += '\n```\n\n';
              message += 'Please check if these resources are correctly registered in bioregistry.io.\n\n';
              hasIssues = true;
            }
            
            if (fs.existsSync('duplicates.txt')) {
              const duplicates = fs.readFileSync('duplicates.txt', 'utf8');
              message += '### Duplicate Resources\n\n';
              message += 'The following resources appear multiple times in collection.yaml:\n\n';
              message += '```\n';
              message += duplicates;
              message += '\n```\n\n';
              message += 'Please remove the duplicate entries.\n\n';
              hasIssues = true;
            }

            if (fs.existsSync('invalid_prefixes.txt')) {
              const invalidPrefixes = fs.readFileSync('invalid_prefixes.txt', 'utf8');
              message += '### Invalid Prefixes\n\n';
              message += 'The following prefixes are not registered in bioregistry.io:\n\n';
              message += '```\n';
              message += invalidPrefixes;
              message += '\n```\n\n';
              message += 'Please check if these prefixes are correct or need to be registered.\n\n';
              hasIssues = true;
            }

            // Parse validation.log for missing resolver and deprecated resources
            if (fs.existsSync('validation.log')) {
              const log = fs.readFileSync('validation.log', 'utf8');
              
              // Extract missing resolver resources
              const missingResolverMatch = log.match(/Missing resolver for the following resources:\s+([\s\S]*?)(?=Deprecated resources detected:|$)/);
              if (missingResolverMatch && missingResolverMatch[1]) {
                const missingResolver = missingResolverMatch[1].trim().split('\n').filter(Boolean);
                if (missingResolver.length > 0) {
                  message += '### Missing Resolver\n\n';
                  message += 'The following resources do not have a resolver (uri_format) in bioregistry.io:\n\n';
                  message += '```\n';
                  message += missingResolver.join('\n');
                  message += '\n```\n\n';
                  message += 'Please check if these resources should have a resolver or be removed.\n\n';
                  hasIssues = true;
                }
              }
              
              // Extract deprecated resources
              const deprecatedMatch = log.match(/Deprecated resources detected:\s+([\s\S]*?)(?=$)/);
              if (deprecatedMatch && deprecatedMatch[1]) {
                const deprecated = deprecatedMatch[1].trim().split('\n').filter(Boolean);
                if (deprecated.length > 0) {
                  message += '### Deprecated Resources (Warning)\n\n';
                  message += 'The following resources or prefixes are marked as deprecated in bioregistry.io:\n\n';
                  message += '```\n';
                  message += deprecated.join('\n');
                  message += '\n```\n\n';
                  message += 'Please check if these resources should be removed or replaced.\n\n';
                }
              }
            }

            if (hasIssues || message !== '## Bioregistry Collection Issues\n\n') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }

      - name: Cleanup temporary files
        if: always() && steps.check_trigger.outputs.is_auto_triggered != 'true' && steps.check_bot.outputs.is_bot != 'true'
        run: |
          rm -f validation.log
